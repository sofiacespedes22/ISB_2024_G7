# -*- coding: utf-8 -*-
"""EEG.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1vq6jXBT-fuqkGd6hDdnmwWae1m1OWdSI
"""

import numpy as np
import os
import csv
import requests

# Función para extraer y procesar los datos de OpenBCI
def extract_file_OpenBCI(file):
    array = np.genfromtxt(file + ".txt", delimiter=",", skip_header=5)
    chs = np.transpose(array[:, 1:9])
    return chs

# Función para convertir los valores ADC a microvoltios
def touV_byOpenBCI(ad_values, scale_factor=0.02235):
    """
    Convert OpenBCI raw ADC values to microvolts.

    Parameters:
    ad_values: List of ADC values from OpenBCI.
    scale_factor: Scale factor for the specific OpenBCI board (Cyton: 0.02235, Ganglion: 0.0419453125)

    Returns:
    List of microvolt values.
    """
    uv_values = ad_values * scale_factor
    return uv_values

# Función para segmentar el archivo de señal EEG y convertirlo a CSV
def txt_to_csv_first_window(txt_file_path, base_csv_file_path, window_size=250):
    chs = extract_file_OpenBCI(txt_file_path)

    for ch_index in range(8):  # Procesar los 8 canales
        channel_data = touV_byOpenBCI(chs[ch_index])
        window_data = []
        timestamp = 0
        window_count = 0

        for i, value in enumerate(channel_data):
            window_data.append([timestamp, value])
            timestamp += 1  # Incrementar el timestamp por 1 ms
            if len(window_data) == window_size:
                # Crear el archivo CSV para la ventana actual de datos
                csv_file_path = f"{base_csv_file_path}ch{ch_index}_window{window_count}.csv"
                with open(csv_file_path, 'w', newline='') as csv_file:
                    csv_writer = csv.writer(csv_file)
                    csv_writer.writerow(['timestamp', 'eeg'])  # Escribir los encabezados
                    csv_writer.writerows(window_data)  # Escribir las filas de datos
                window_count += 1
                window_data = []  # Reiniciar los datos de la ventana

        # Si hay datos restantes en la última ventana incompleta, escribirlos también
        if window_data:
            csv_file_path = f"{base_csv_file_path}ch{ch_index}_window{window_count}.csv"
            with open(csv_file_path, 'w', newline='') as csv_file:
                csv_writer = csv.writer(csv_file)
                csv_writer.writerow(['timestamp', 'eeg'])  # Escribir los encabezados
                csv_writer.writerows(window_data)  # Escribir las filas de datos

# Función para subir los archivos CSV a Edge Impulse
def upload_to_edge_impulse(base_csv_file_path, api_key, label):
    # Agrega los archivos .csv que deseas subir a Edge Impulse
    files = [f for f in os.listdir() if f.startswith(base_csv_file_path) and f.endswith('.csv')]

    # Prepara los archivos para la solicitud
    prepared_files = []
    for file in files:
        prepared_files.append(('data', (os.path.basename(file), open(file, 'rb'), 'text/csv')))

    # Sube los archivos a Edge Impulse usando la API y imprime la respuesta.
    try:
        res = requests.post(url='https://ingestion.edgeimpulse.com/api/training/files',
                            headers={
                                'x-label': label,
                                'x-api-key': api_key,
                            },
                            files=prepared_files)

        if res.status_code == 200:
            print('Uploaded file(s) to Edge Impulse\n', res.status_code, res.content)
        else:
            print('Failed to upload file(s) to Edge Impulse\n', res.status_code, res.content)
    finally:
        # Asegúrate de cerrar los archivos después de la solicitud
        for _, (filename, fileobj, _) in prepared_files:
            fileobj.close()

# Ejemplo de uso
txt_file_path = 'OpenBCI-RAW-mate'  # Nombre base del archivo de entrada
base_csv_file_path = 'OpenBCI-RAW-mate'  # Nombre base para los archivos CSV
api_key = 'ei_9fd00242dc38a411c3e476920d7355b834d92106ed48ffacbd46ed10769bd1e0'  # Clave API de Edge Impulse
label = 'eegPreg'  # Etiqueta para los datos

# Procesar y segmentar la señal EEG
txt_to_csv_first_window(txt_file_path, base_csv_file_path, window_size=2000)

# Subir los archivos CSV generados a Edge Impulse
upload_to_edge_impulse(base_csv_file_path, api_key, label)